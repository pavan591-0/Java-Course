git add .
git commit -m "msg"
git push origin main


JDK = JVM + JRE

regex in string

 - . - Any character
 - [abc] - first alphabet should be a, b or c
 - [abc][vz] - same as above but second alphabet should be v or z
 - [^abc] - except a,b or c.
 - [a-z1-7] - a to z or 1 to 7
 - A | B - A or B
 - ZX - exactly ZX.
 - \d - digits
 - \D - not digits
 - \s - space
 - \S - not space
 - \w - alphabets or digits
 - \W - neither alphabets nor digits
 
 above all for single character.
 now for multiple characters:
 
 - * -  0 or more time.
 - + - one or more
 - ? - 0 or 1
 - {X} - x times(length)
 - {X, Y} - b/w x and y.


Variable args:
syntax: return-type method-name(datatype... var_name) can pass n parameters or array.
access same way we access the the array. It should be the last argument. Cant have multiple Variable args in same function.

OOPs:
* abstract
* Encapsulation
* Inheritance
* polymorphism

Generalization(Interface) - Bottom up approach like when u want to refer similiar classes as one super class ex: car, bike and boat can refer as vehicle
Specialization(Inheritance) - top down approach explain iphone updates.

Final:
-- Variables: to initialise their are 3 types
 first, during declaration.
 second, in static blocks if variable also static
 third, using constructors.

Final methods can't be overrided.
Final Classes can't be extended. 

A singleton class in object-oriented programming is a class that is designed to have only one instance throughout the application's lifecycle. 
This is useful when exactly one object is needed to coordinate actions across the system. 

 Key Characteristics of Singleton Class:

1. Single Instance: Only one instance of the class is created.
2. Global Access: The single instance is accessible globally.

 Steps to Implement a Singleton Class:

1. Private Constructor: Ensures no other class can instantiate it.
2. Private Static Instance: Holds the single instance of the class.
3. Public Static Method: Provides a global point of access to the instance.

 Example Code in Java:

```java
public class Singleton {
    // Private static instance of the Singleton class
    private static Singleton instance;
    
    // Private constructor to prevent instantiation
    private Singleton() {
        // initialization code
    }
    
    // Public static method to provide access to the instance
    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
    
    // Example method
    public void showMessage() {
        System.out.println("Hello World from Singleton!");
    }
    
    // Prevents cloning of the object
    @Override
    protected Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        // Get the single instance of Singleton
        Singleton singleInstance = Singleton.getInstance();
        
        // Call a method on the Singleton instance
        singleInstance.showMessage();
    }
}
```

 Thread-Safe Singleton:
In a multithreaded environment, ensuring thread safety is crucial. One way to achieve this is using synchronized methods.

```java
public class ThreadSafeSingleton {
    private static ThreadSafeSingleton instance;

    private ThreadSafeSingleton() {
        // initialization code
    }

    public static synchronized ThreadSafeSingleton getInstance() {
        if (instance == null) {
            instance = new ThreadSafeSingleton();
        }
        return instance;
    }

    public void showMessage() {
        System.out.println("Hello World from ThreadSafeSingleton!");
    }
}
```

 Eager Initialization:
Another approach is to instantiate the singleton at the time of class loading, which simplifies the implementation but might cause resource wastage if the 
instance is not used.

```java
public class EagerSingleton {
    private static final EagerSingleton instance = new EagerSingleton();

    private EagerSingleton() {
        // initialization code
    }

    public static EagerSingleton getInstance() {
        return instance;
    }

    public void showMessage() {
        System.out.println("Hello World from EagerSingleton!");
    }
}
```

 Bill Pugh Singleton Design:
This implementation takes advantage of the Java memory model's guarantees about class initialization.

```java
public class BillPughSingleton {

    private BillPughSingleton() {
        // initialization code
    }

    private static class SingletonHelper {
        private static final BillPughSingleton INSTANCE = new BillPughSingleton();
    }

    public static BillPughSingleton getInstance() {
        return SingletonHelper.INSTANCE;
    }

    public void showMessage() {
        System.out.println("Hello World from BillPughSingleton!");
    }
}
```

 Enum Singleton:
Using an enum is a simple way to implement a singleton that is also thread-safe and serialization-safe.

```java
public enum EnumSingleton {
    INSTANCE;

    public void showMessage() {
        System.out.println("Hello World from EnumSingleton!");
    }
}

// Usage
public class Main {
    public static void main(String[] args) {
        EnumSingleton.INSTANCE.showMessage();
    }
}
```

 Notes:
- Serialization Issues: Regular singleton implementations can break during serialization. Using enums or handling `readResolve` methods can solve this.
- Reflection: Reflection can be used to break the singleton pattern. This can be mitigated by handling such cases explicitly in the constructor.
- Lazy Initialization: It defers the creation of the instance until it is needed. This can improve performance if the instance is not used immediately.

Each of these approaches has its pros and cons, and the best choice depends on the specific requirements of your application.


 Java Packages Quick Revision

 1. What is a Package?
- Definition: A namespace that groups related classes and interfaces.
- Purpose: Organizes code, manages namespaces, and prevents name conflicts.

 2. Types of Packages
- Built-in Packages: Standard Java libraries (e.g., `java.lang`, `java.util`, `java.io`).
- User-defined Packages: Custom packages created by developers (e.g., `com.mycompany.project`).

 3. Creating a Package
- Syntax: Use the `package` keyword at the top of a Java file.
  ```java
  package com.example.myapp;
  
  public class MyClass {
      // Class code
  }
  ```

 4. Using Packages
- Import Statement: Bring in classes from other packages.
  ```java
  import java.util.Scanner;
  
  public class Test {
      public static void main(String[] args) {
          Scanner scanner = new Scanner(System.in);
      }
  }
  ```
- Fully Qualified Name: Use the complete package path without importing.
  ```java
  public class Test {
      public static void main(String[] args) {
          java.util.Scanner scanner = new java.util.Scanner(System.in);
      }
  }
  ```

 5. Package Hierarchy
- Structure: Organized hierarchically using dots.
  - Example: `com.company.project` (`com` → `company` → `project`).

 6. Access Control with Packages
- Modifiers:
  - `public`: Accessible from any other class.
  - `protected`: Accessible within the same package and subclasses.
  - Default (no modifier): Accessible only within the same package.
  - `private`: Accessible only within the declaring class.

 7. Naming Conventions
- Lowercase: Use all lowercase letters to avoid conflicts.
- Reverse Domain: Typically use reverse domain names (e.g., `com.companyname.project`).

 8. Special Packages
- `java.lang`: Automatically imported (e.g., `String`, `System`, `Math`).

 9. Subpackages
- Independence: Subpackages are separate from parent packages.
  - Example: Importing `java.util` does not import `java.util.concurrent`.

 10. Package Scope
- Package-Private: Classes without an access modifier are accessible only within the same package.

 11. Static Import
- Usage: Import static members to use them without class qualification.
  ```java
  import static java.lang.Math.*;
  
  public class Test {
      public static void main(String[] args) {
          double result = sqrt(25); // Instead of Math.sqrt(25)
      }
  }
  ```

 12. Package Sealing
- Definition: Ensures all classes in a package are from the same JAR file.
- Purpose: Enhances security and integrity by preventing external additions.

---

 Key Points to Remember:
- Organization: Packages help in organizing code logically and managing namespaces.
- Access Control: Understand how access modifiers affect visibility across packages.
- Importing: Know when to use `import` vs. fully qualified names.
- Conventions: Follow naming conventions to maintain clarity and avoid conflicts.
- Special Features: Remember that `java.lang` is always available and understand the concept of static imports.

------------------------------ Java Exceptions --------------------------------------------------------------------

 1. What is an Exception?
   - An exception in Java is an event that disrupts the normal flow of a program’s execution.
   - It is an object that is thrown at runtime when an abnormal situation arises.

 2. Types of Exceptions:
   - Checked Exceptions: 
     - These are exceptions that are checked at compile time.
     - The programmer must handle these exceptions using try-catch blocks or by declaring them in the method signature using the `throws` keyword.
     - Example: `IOException`, `SQLException`.
   - Unchecked Exceptions (Runtime Exceptions):
     - These exceptions occur at runtime and are not checked at compile time.
     - They are usually the result of programming errors, such as logic errors or improper use of an API.
     - Example: `NullPointerException`, `ArrayIndexOutOfBoundsException`.
   - Errors:
     - Errors are serious problems that a reasonable application should not try to catch.
     - Example: `OutOfMemoryError`, `StackOverflowError`.

 3. Exception Hierarchy:
   - All exceptions are derived from the `Throwable` class.
     - Throwable
       - Exception
         - Checked Exceptions
         - RuntimeException (Unchecked)
       - Error

 4. Handling Exceptions:
   - Try-Catch Block:
     - Used to handle exceptions that occur during the execution of a block of code.
     - Syntax:
       ```java
       try {
           // code that may throw an exception
       } catch (ExceptionType1 e1) {
           // handle exception of type ExceptionType1
       } catch (ExceptionType2 e2) {
           // handle exception of type ExceptionType2
       } finally {
           // code that will always execute, regardless of exception occurrence
       }
       ```
   - Finally Block:
     - Used to execute important code such as closing resources, irrespective of whether an exception occurs or not.
   - Throw Keyword:
     - Used to explicitly throw an exception.
     - Example: `throw new ArithmeticException("Division by zero is not allowed");`
   - Throws Keyword:
     - Used in a method signature to declare that the method may throw one or more exceptions.
     - Syntax:
       ```java
       public void myMethod() throws IOException, SQLException {
           // method code
       }
       ```

 5. Common Java Exceptions:
   - NullPointerException: Occurs when trying to use an object reference that has not been initialized (is null).
   - ArrayIndexOutOfBoundsException: Occurs when trying to access an array element with an index that is out of bounds.
   - ClassNotFoundException: Thrown when trying to load a class at runtime using `Class.forName()` method and the class cannot be found.
   - ArithmeticException: Thrown when an illegal arithmetic operation occurs, such as division by zero.
   - IOException: Thrown when an I/O operation fails or is interrupted.

 6. Custom Exceptions:
   - Java allows you to create your own exceptions by extending the `Exception` class (for checked exceptions) or `RuntimeException` class (for unchecked exceptions).
   - Example:
     ```java
     class MyCustomException extends Exception {
         public MyCustomException(String message) {
             super(message);
         }
     }
     ```

 7. Best Practices:
   - Always clean up resources like files or database connections in a `finally` block or use try-with-resources (Java 7+).
   - Catch specific exceptions instead of a generic `Exception` to provide more accurate error handling.
   - Avoid catching `Throwable` or `Error`, as they represent serious problems that typically should not be caught.
   - Create custom exceptions when the built-in exceptions do not adequately describe the error conditions in your application.

 8. Exception Propagation:
   - Exceptions are propagated up the call stack until they are caught or until they reach the main method.
   - If an exception is not caught anywhere, it is passed to the JVM, which typically terminates the program and prints the stack trace.


                   Threads

Thread states are an important concept in Java and multithreading in general. Here's a breakdown of the different states a thread can be in, along with details on each for interview preparation:

 1. New (Born)
   - State: A thread is in this state when it is created but not yet started.
   - Example: When you create a new instance of `Thread`, e.g., `Thread t = new Thread()`, it is in the "New" state.
   - Action: To move it to the next state, you call the `start()` method.

 2. Runnable (Ready/Running)
   - State: The thread is ready to run or is running.
   - Key Point: A thread in this state is either waiting for CPU time (Ready) or executing its task (Running).
   - Example: After calling the `start()` method, the thread moves into the runnable state.
   - Scheduling: The thread scheduler decides which runnable thread to execute based on thread priority and system state.

 3. Blocked
   - State: A thread is in the Blocked state when it wants to enter a synchronized block or method but another thread is holding the monitor lock.
   - Reason: It is waiting to acquire a lock (for example, if two threads are trying to access a synchronized block).
   - Transition: Once the lock is released, the thread moves back to the runnable state.

 4. Waiting
   - State: The thread is waiting indefinitely for another thread to perform a specific action.
   - Reason: It could be due to methods like `Object.wait()`, `Thread.join()`, or `LockSupport.park()`.
   - Key Point: The thread remains in the waiting state until another thread signals (e.g., `notify()`, `notifyAll()`) or finishes (in the case of `join()`).
   - Difference from Blocked: The thread isn’t waiting for a lock but waiting for another thread’s action.

 5. Timed Waiting
   - State: The thread is waiting, but for a specific period of time.
   - Example: This happens when you use methods like `sleep(long ms)`, `join(long ms)`, `wait(long ms)`, or `LockSupport.parkNanos()`.
   - Key Point: After the time period expires, the thread either becomes runnable or moves to a different state (e.g., when waiting for a lock).

 6. Terminated (Dead)
   - State: The thread has finished execution either by completing its task or by being terminated due to an exception.
   - Example: Once the `run()` method completes, the thread reaches the terminated state.
   - Key Point: After reaching this state, the thread cannot be restarted or moved back to another state.

 Additional Concepts
- Daemon Threads: These are background threads that are automatically killed when no other non-daemon threads are running. You can set a thread to be a daemon using `thread.setDaemon(true)` before it starts.
- Thread Lifecycle: Threads move between these states depending on actions like starting, synchronizing, waiting, and completing execution.

 Example Code for Thread States
```java
public class ThreadExample implements Runnable {
    public void run() {
        System.out.println(Thread.currentThread().getName() + " is running");
        try {
            Thread.sleep(1000); // Timed Waiting
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(Thread.currentThread().getName() + " is finished");
    }

    public static void main(String[] args) {
        Thread thread = new Thread(new ThreadExample());
        System.out.println(thread.getState()); // NEW
        thread.start();
        System.out.println(thread.getState()); // RUNNABLE
        try {
            thread.join(); // WAITING or TIMED WAITING
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(thread.getState()); // TERMINATED
    }
}
```

 Common Interview Questions
1. What are the different thread states in Java?
2. What is the difference between Blocked, Waiting, and Timed Waiting states?
3. What is a daemon thread, and how is it different from a regular thread?
4. How do you check the current state of a thread in Java?
5. Can a thread be restarted after it reaches the Terminated state?
6. What causes a thread to move from Blocked to Runnable state?


 Synchronization in Java: Interview Prep Notes

1. What is Synchronization?
- Synchronization in Java is a mechanism to control access to shared resources by multiple threads. It ensures that only one thread can access the resource at any given time, 
preventing race conditions and ensuring thread safety.

2. Why Synchronization?
- When multiple threads access shared resources (like objects or variables) simultaneously without proper management, it can lead to inconsistent or incorrect results.
- Synchronization helps to coordinate threads, ensuring that shared data is accessed in a predictable and safe manner.

3. Types of Synchronization in Java
   - Process Synchronization: Manages processes running in parallel.
   - Thread Synchronization: Focuses on ensuring that multiple threads do not simultaneously access shared resources.

4. Thread Synchronization Techniques
   - Synchronized Methods
   - Synchronized Blocks
   - Static Synchronization

5. Synchronized Methods
   - When a method is declared with the `synchronized` keyword, only one thread can execute it at a time on the object instance.
   - Syntax:
     ```java
     public synchronized void method() {
         // critical section
     }
     ```
   - It locks the entire object for that method, so no other synchronized methods can run at the same time on that object by different threads.

6. Synchronized Blocks
   - To improve efficiency and limit the scope of synchronization, synchronized blocks are used.
   - It allows locking only a specific section of the code instead of the entire method.
   - Syntax:
     ```java
     public void method() {
         synchronized(object) {
             // critical section
         }
     }
     ```
   - You can lock an object (e.g., `this`, or any specific object) as the parameter for synchronization.

7. Static Synchronization
   - If you want to synchronize static methods, you can declare them as `synchronized`. This ensures that only one thread can access any synchronized static method for that class at a time.
   - Static synchronization locks the *class* object instead of the object instance.

8. Locks and Monitors
   - In Java, every object has an implicit monitor associated with it. When a thread enters a synchronized method or block, it acquires the object's monitor lock.
   - Other threads attempting to access the same object must wait until the lock is released.

9. Reentrant Synchronization
   - Java’s synchronization is reentrant, meaning a thread can acquire the same lock multiple times. For example, if a synchronized method calls another synchronized method on the
   same object, the thread does not block.

10. Inter-thread Communication
   - The `wait()`, `notify()`, and `notifyAll()` methods are used to coordinate communication between threads in a synchronized context.
     - `wait()` causes the thread to wait until another thread calls `notify()`.
     - `notify()` wakes up a waiting thread.
     - `notifyAll()` wakes up all waiting threads.

11. Deadlock
   - Deadlock occurs when two or more threads are blocked forever, each waiting for the other to release the lock.
   - Prevention:
     - Avoid nested synchronized blocks.
     - Use timeout when waiting for locks.

12. Locks from `java.util.concurrent.locks` Package
   - ReentrantLock: A lock with the same reentrant behavior as implicit synchronization.
   - ReadWriteLock: Allows multiple threads to read the resource but only one thread can write at a time.
   - Lock Interface Methods:
     - `lock()`: Acquires the lock.
     - `unlock()`: Releases the lock.
     - `tryLock()`: Attempts to acquire the lock without waiting.

13. Important Notes
   - Synchronized methods/block performance: Excessive use of synchronization can lead to performance degradation (thread contention). Fine-grained synchronization (using synchronized blocks)
   is preferred.
   - Volatile Keyword: It ensures visibility of changes to variables across threads but does not provide atomicity, so use it in combination with synchronization where necessary.

14. Common Interview Questions
   - How does synchronization in Java work?
   - What's the difference between synchronized methods and synchronized blocks?
   - What are the limitations of synchronization?
   - What is a deadlock? How can you avoid it?
   - Explain `ReentrantLock` and how it differs from synchronized methods/blocks.
   - How do `wait()`, `notify()`, and `notifyAll()` work in synchronization?
